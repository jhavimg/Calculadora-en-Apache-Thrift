/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package calcmatriceshandler;

/**
 *
 * @author godoy
 */


/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */


@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2024-04-05")
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class CalculadoraMatrices {

  public interface Iface {

    public java.util.List<java.util.List<java.lang.Double>> sumaM(java.util.List<java.util.List<java.lang.Double>> m1, java.util.List<java.util.List<java.lang.Double>> m2) throws org.apache.thrift.TException;

    public java.util.List<java.util.List<java.lang.Double>> restaM(java.util.List<java.util.List<java.lang.Double>> m1, java.util.List<java.util.List<java.lang.Double>> m2) throws org.apache.thrift.TException;

    public java.util.List<java.util.List<java.lang.Double>> productoM(java.util.List<java.util.List<java.lang.Double>> m1, java.util.List<java.util.List<java.lang.Double>> m2) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void sumaM(java.util.List<java.util.List<java.lang.Double>> m1, java.util.List<java.util.List<java.lang.Double>> m2, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.List<java.lang.Double>>> resultHandler) throws org.apache.thrift.TException;

    public void restaM(java.util.List<java.util.List<java.lang.Double>> m1, java.util.List<java.util.List<java.lang.Double>> m2, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.List<java.lang.Double>>> resultHandler) throws org.apache.thrift.TException;

    public void productoM(java.util.List<java.util.List<java.lang.Double>> m1, java.util.List<java.util.List<java.lang.Double>> m2, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.List<java.lang.Double>>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    @Override
    public java.util.List<java.util.List<java.lang.Double>> sumaM(java.util.List<java.util.List<java.lang.Double>> m1, java.util.List<java.util.List<java.lang.Double>> m2) throws org.apache.thrift.TException
    {
      send_sumaM(m1, m2);
      return recv_sumaM();
    }

    public void send_sumaM(java.util.List<java.util.List<java.lang.Double>> m1, java.util.List<java.util.List<java.lang.Double>> m2) throws org.apache.thrift.TException
    {
      sumaM_args args = new sumaM_args();
      args.setM1(m1);
      args.setM2(m2);
      sendBase("sumaM", args);
    }

    public java.util.List<java.util.List<java.lang.Double>> recv_sumaM() throws org.apache.thrift.TException
    {
      sumaM_result result = new sumaM_result();
      receiveBase(result, "sumaM");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sumaM failed: unknown result");
    }

    @Override
    public java.util.List<java.util.List<java.lang.Double>> restaM(java.util.List<java.util.List<java.lang.Double>> m1, java.util.List<java.util.List<java.lang.Double>> m2) throws org.apache.thrift.TException
    {
      send_restaM(m1, m2);
      return recv_restaM();
    }

    public void send_restaM(java.util.List<java.util.List<java.lang.Double>> m1, java.util.List<java.util.List<java.lang.Double>> m2) throws org.apache.thrift.TException
    {
      restaM_args args = new restaM_args();
      args.setM1(m1);
      args.setM2(m2);
      sendBase("restaM", args);
    }

    public java.util.List<java.util.List<java.lang.Double>> recv_restaM() throws org.apache.thrift.TException
    {
      restaM_result result = new restaM_result();
      receiveBase(result, "restaM");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "restaM failed: unknown result");
    }

    @Override
    public java.util.List<java.util.List<java.lang.Double>> productoM(java.util.List<java.util.List<java.lang.Double>> m1, java.util.List<java.util.List<java.lang.Double>> m2) throws org.apache.thrift.TException
    {
      send_productoM(m1, m2);
      return recv_productoM();
    }

    public void send_productoM(java.util.List<java.util.List<java.lang.Double>> m1, java.util.List<java.util.List<java.lang.Double>> m2) throws org.apache.thrift.TException
    {
      productoM_args args = new productoM_args();
      args.setM1(m1);
      args.setM2(m2);
      sendBase("productoM", args);
    }

    public java.util.List<java.util.List<java.lang.Double>> recv_productoM() throws org.apache.thrift.TException
    {
      productoM_result result = new productoM_result();
      receiveBase(result, "productoM");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "productoM failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
    @Override
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    @Override
    public void sumaM(java.util.List<java.util.List<java.lang.Double>> m1, java.util.List<java.util.List<java.lang.Double>> m2, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.List<java.lang.Double>>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sumaM_call method_call = new sumaM_call(m1, m2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sumaM_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.util.List<java.lang.Double>>> {
      private java.util.List<java.util.List<java.lang.Double>> m1;
      private java.util.List<java.util.List<java.lang.Double>> m2;
      public sumaM_call(java.util.List<java.util.List<java.lang.Double>> m1, java.util.List<java.util.List<java.lang.Double>> m2, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.List<java.lang.Double>>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.m1 = m1;
        this.m2 = m2;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sumaM", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sumaM_args args = new sumaM_args();
        args.setM1(m1);
        args.setM2(m2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.List<java.util.List<java.lang.Double>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sumaM();
      }
    }

    @Override
    public void restaM(java.util.List<java.util.List<java.lang.Double>> m1, java.util.List<java.util.List<java.lang.Double>> m2, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.List<java.lang.Double>>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      restaM_call method_call = new restaM_call(m1, m2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class restaM_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.util.List<java.lang.Double>>> {
      private java.util.List<java.util.List<java.lang.Double>> m1;
      private java.util.List<java.util.List<java.lang.Double>> m2;
      public restaM_call(java.util.List<java.util.List<java.lang.Double>> m1, java.util.List<java.util.List<java.lang.Double>> m2, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.List<java.lang.Double>>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.m1 = m1;
        this.m2 = m2;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("restaM", org.apache.thrift.protocol.TMessageType.CALL, 0));
        restaM_args args = new restaM_args();
        args.setM1(m1);
        args.setM2(m2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.List<java.util.List<java.lang.Double>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_restaM();
      }
    }

    @Override
    public void productoM(java.util.List<java.util.List<java.lang.Double>> m1, java.util.List<java.util.List<java.lang.Double>> m2, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.List<java.lang.Double>>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      productoM_call method_call = new productoM_call(m1, m2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class productoM_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.util.List<java.lang.Double>>> {
      private java.util.List<java.util.List<java.lang.Double>> m1;
      private java.util.List<java.util.List<java.lang.Double>> m2;
      public productoM_call(java.util.List<java.util.List<java.lang.Double>> m1, java.util.List<java.util.List<java.lang.Double>> m2, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.List<java.lang.Double>>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.m1 = m1;
        this.m2 = m2;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("productoM", org.apache.thrift.protocol.TMessageType.CALL, 0));
        productoM_args args = new productoM_args();
        args.setM1(m1);
        args.setM2(m2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.List<java.util.List<java.lang.Double>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_productoM();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("sumaM", new sumaM());
      processMap.put("restaM", new restaM());
      processMap.put("productoM", new productoM());
      return processMap;
    }

    public static class sumaM<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sumaM_args> {
      public sumaM() {
        super("sumaM");
      }

      @Override
      public sumaM_args getEmptyArgsInstance() {
        return new sumaM_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public sumaM_result getResult(I iface, sumaM_args args) throws org.apache.thrift.TException {
        sumaM_result result = new sumaM_result();
        result.success = iface.sumaM(args.m1, args.m2);
        return result;
      }
    }

    public static class restaM<I extends Iface> extends org.apache.thrift.ProcessFunction<I, restaM_args> {
      public restaM() {
        super("restaM");
      }

      @Override
      public restaM_args getEmptyArgsInstance() {
        return new restaM_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public restaM_result getResult(I iface, restaM_args args) throws org.apache.thrift.TException {
        restaM_result result = new restaM_result();
        result.success = iface.restaM(args.m1, args.m2);
        return result;
      }
    }

    public static class productoM<I extends Iface> extends org.apache.thrift.ProcessFunction<I, productoM_args> {
      public productoM() {
        super("productoM");
      }

      @Override
      public productoM_args getEmptyArgsInstance() {
        return new productoM_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public productoM_result getResult(I iface, productoM_args args) throws org.apache.thrift.TException {
        productoM_result result = new productoM_result();
        result.success = iface.productoM(args.m1, args.m2);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("sumaM", new sumaM());
      processMap.put("restaM", new restaM());
      processMap.put("productoM", new productoM());
      return processMap;
    }

    public static class sumaM<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sumaM_args, java.util.List<java.util.List<java.lang.Double>>> {
      public sumaM() {
        super("sumaM");
      }

      @Override
      public sumaM_args getEmptyArgsInstance() {
        return new sumaM_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.List<java.lang.Double>>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.List<java.lang.Double>>>() { 
          @Override
          public void onComplete(java.util.List<java.util.List<java.lang.Double>> o) {
            sumaM_result result = new sumaM_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            sumaM_result result = new sumaM_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, sumaM_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.List<java.lang.Double>>> resultHandler) throws org.apache.thrift.TException {
        iface.sumaM(args.m1, args.m2,resultHandler);
      }
    }

    public static class restaM<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, restaM_args, java.util.List<java.util.List<java.lang.Double>>> {
      public restaM() {
        super("restaM");
      }

      @Override
      public restaM_args getEmptyArgsInstance() {
        return new restaM_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.List<java.lang.Double>>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.List<java.lang.Double>>>() { 
          @Override
          public void onComplete(java.util.List<java.util.List<java.lang.Double>> o) {
            restaM_result result = new restaM_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            restaM_result result = new restaM_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, restaM_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.List<java.lang.Double>>> resultHandler) throws org.apache.thrift.TException {
        iface.restaM(args.m1, args.m2,resultHandler);
      }
    }

    public static class productoM<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, productoM_args, java.util.List<java.util.List<java.lang.Double>>> {
      public productoM() {
        super("productoM");
      }

      @Override
      public productoM_args getEmptyArgsInstance() {
        return new productoM_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.List<java.lang.Double>>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.List<java.lang.Double>>>() { 
          @Override
          public void onComplete(java.util.List<java.util.List<java.lang.Double>> o) {
            productoM_result result = new productoM_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            productoM_result result = new productoM_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, productoM_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.List<java.lang.Double>>> resultHandler) throws org.apache.thrift.TException {
        iface.productoM(args.m1, args.m2,resultHandler);
      }
    }

  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class sumaM_args implements org.apache.thrift.TBase<sumaM_args, sumaM_args._Fields>, java.io.Serializable, Cloneable, Comparable<sumaM_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sumaM_args");

    private static final org.apache.thrift.protocol.TField M1_FIELD_DESC = new org.apache.thrift.protocol.TField("m1", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField M2_FIELD_DESC = new org.apache.thrift.protocol.TField("m2", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sumaM_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sumaM_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Double>> m1; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Double>> m2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      M1((short)1, "m1"),
      M2((short)2, "m2");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // M1
            return M1;
          case 2: // M2
            return M2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.M1, new org.apache.thrift.meta_data.FieldMetaData("m1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
      tmpMap.put(_Fields.M2, new org.apache.thrift.meta_data.FieldMetaData("m2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sumaM_args.class, metaDataMap);
    }

    public sumaM_args() {
    }

    public sumaM_args(
      java.util.List<java.util.List<java.lang.Double>> m1,
      java.util.List<java.util.List<java.lang.Double>> m2)
    {
      this();
      this.m1 = m1;
      this.m2 = m2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sumaM_args(sumaM_args other) {
      if (other.isSetM1()) {
        java.util.List<java.util.List<java.lang.Double>> __this__m1 = new java.util.ArrayList<java.util.List<java.lang.Double>>(other.m1.size());
        for (java.util.List<java.lang.Double> other_element : other.m1) {
          java.util.List<java.lang.Double> __this__m1_copy = new java.util.ArrayList<java.lang.Double>(other_element);
          __this__m1.add(__this__m1_copy);
        }
        this.m1 = __this__m1;
      }
      if (other.isSetM2()) {
        java.util.List<java.util.List<java.lang.Double>> __this__m2 = new java.util.ArrayList<java.util.List<java.lang.Double>>(other.m2.size());
        for (java.util.List<java.lang.Double> other_element : other.m2) {
          java.util.List<java.lang.Double> __this__m2_copy = new java.util.ArrayList<java.lang.Double>(other_element);
          __this__m2.add(__this__m2_copy);
        }
        this.m2 = __this__m2;
      }
    }

    @Override
    public sumaM_args deepCopy() {
      return new sumaM_args(this);
    }

    @Override
    public void clear() {
      this.m1 = null;
      this.m2 = null;
    }

    public int getM1Size() {
      return (this.m1 == null) ? 0 : this.m1.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.util.List<java.lang.Double>> getM1Iterator() {
      return (this.m1 == null) ? null : this.m1.iterator();
    }

    public void addToM1(java.util.List<java.lang.Double> elem) {
      if (this.m1 == null) {
        this.m1 = new java.util.ArrayList<java.util.List<java.lang.Double>>();
      }
      this.m1.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.util.List<java.lang.Double>> getM1() {
      return this.m1;
    }

    public sumaM_args setM1(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Double>> m1) {
      this.m1 = m1;
      return this;
    }

    public void unsetM1() {
      this.m1 = null;
    }

    /** Returns true if field m1 is set (has been assigned a value) and false otherwise */
    public boolean isSetM1() {
      return this.m1 != null;
    }

    public void setM1IsSet(boolean value) {
      if (!value) {
        this.m1 = null;
      }
    }

    public int getM2Size() {
      return (this.m2 == null) ? 0 : this.m2.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.util.List<java.lang.Double>> getM2Iterator() {
      return (this.m2 == null) ? null : this.m2.iterator();
    }

    public void addToM2(java.util.List<java.lang.Double> elem) {
      if (this.m2 == null) {
        this.m2 = new java.util.ArrayList<java.util.List<java.lang.Double>>();
      }
      this.m2.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.util.List<java.lang.Double>> getM2() {
      return this.m2;
    }

    public sumaM_args setM2(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Double>> m2) {
      this.m2 = m2;
      return this;
    }

    public void unsetM2() {
      this.m2 = null;
    }

    /** Returns true if field m2 is set (has been assigned a value) and false otherwise */
    public boolean isSetM2() {
      return this.m2 != null;
    }

    public void setM2IsSet(boolean value) {
      if (!value) {
        this.m2 = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case M1:
        if (value == null) {
          unsetM1();
        } else {
          setM1((java.util.List<java.util.List<java.lang.Double>>)value);
        }
        break;

      case M2:
        if (value == null) {
          unsetM2();
        } else {
          setM2((java.util.List<java.util.List<java.lang.Double>>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case M1:
        return getM1();

      case M2:
        return getM2();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case M1:
        return isSetM1();
      case M2:
        return isSetM2();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof sumaM_args)
        return this.equals((sumaM_args)that);
      return false;
    }

    public boolean equals(sumaM_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_m1 = true && this.isSetM1();
      boolean that_present_m1 = true && that.isSetM1();
      if (this_present_m1 || that_present_m1) {
        if (!(this_present_m1 && that_present_m1))
          return false;
        if (!this.m1.equals(that.m1))
          return false;
      }

      boolean this_present_m2 = true && this.isSetM2();
      boolean that_present_m2 = true && that.isSetM2();
      if (this_present_m2 || that_present_m2) {
        if (!(this_present_m2 && that_present_m2))
          return false;
        if (!this.m2.equals(that.m2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetM1()) ? 131071 : 524287);
      if (isSetM1())
        hashCode = hashCode * 8191 + m1.hashCode();

      hashCode = hashCode * 8191 + ((isSetM2()) ? 131071 : 524287);
      if (isSetM2())
        hashCode = hashCode * 8191 + m2.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sumaM_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetM1(), other.isSetM1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetM1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.m1, other.m1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetM2(), other.isSetM2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetM2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.m2, other.m2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sumaM_args(");
      boolean first = true;

      sb.append("m1:");
      if (this.m1 == null) {
        sb.append("null");
      } else {
        sb.append(this.m1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("m2:");
      if (this.m2 == null) {
        sb.append("null");
      } else {
        sb.append(this.m2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sumaM_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public sumaM_argsStandardScheme getScheme() {
        return new sumaM_argsStandardScheme();
      }
    }

    private static class sumaM_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sumaM_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, sumaM_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // M1
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.m1 = new java.util.ArrayList<java.util.List<java.lang.Double>>(_list0.size);
                  @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    {
                      org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                      _elem1 = new java.util.ArrayList<java.lang.Double>(_list3.size);
                      double _elem4;
                      for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                      {
                        _elem4 = iprot.readDouble();
                        _elem1.add(_elem4);
                      }
                      iprot.readListEnd();
                    }
                    struct.m1.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setM1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // M2
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                  struct.m2 = new java.util.ArrayList<java.util.List<java.lang.Double>>(_list6.size);
                  @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _elem7;
                  for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                  {
                    {
                      org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                      _elem7 = new java.util.ArrayList<java.lang.Double>(_list9.size);
                      double _elem10;
                      for (int _i11 = 0; _i11 < _list9.size; ++_i11)
                      {
                        _elem10 = iprot.readDouble();
                        _elem7.add(_elem10);
                      }
                      iprot.readListEnd();
                    }
                    struct.m2.add(_elem7);
                  }
                  iprot.readListEnd();
                }
                struct.setM2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, sumaM_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.m1 != null) {
          oprot.writeFieldBegin(M1_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.m1.size()));
            for (java.util.List<java.lang.Double> _iter12 : struct.m1)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter12.size()));
                for (double _iter13 : _iter12)
                {
                  oprot.writeDouble(_iter13);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.m2 != null) {
          oprot.writeFieldBegin(M2_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.m2.size()));
            for (java.util.List<java.lang.Double> _iter14 : struct.m2)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter14.size()));
                for (double _iter15 : _iter14)
                {
                  oprot.writeDouble(_iter15);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sumaM_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public sumaM_argsTupleScheme getScheme() {
        return new sumaM_argsTupleScheme();
      }
    }

    private static class sumaM_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sumaM_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sumaM_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetM1()) {
          optionals.set(0);
        }
        if (struct.isSetM2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetM1()) {
          {
            oprot.writeI32(struct.m1.size());
            for (java.util.List<java.lang.Double> _iter16 : struct.m1)
            {
              {
                oprot.writeI32(_iter16.size());
                for (double _iter17 : _iter16)
                {
                  oprot.writeDouble(_iter17);
                }
              }
            }
          }
        }
        if (struct.isSetM2()) {
          {
            oprot.writeI32(struct.m2.size());
            for (java.util.List<java.lang.Double> _iter18 : struct.m2)
            {
              {
                oprot.writeI32(_iter18.size());
                for (double _iter19 : _iter18)
                {
                  oprot.writeDouble(_iter19);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sumaM_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list20 = iprot.readListBegin(org.apache.thrift.protocol.TType.LIST);
            struct.m1 = new java.util.ArrayList<java.util.List<java.lang.Double>>(_list20.size);
            @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _elem21;
            for (int _i22 = 0; _i22 < _list20.size; ++_i22)
            {
              {
                org.apache.thrift.protocol.TList _list23 = iprot.readListBegin(org.apache.thrift.protocol.TType.DOUBLE);
                _elem21 = new java.util.ArrayList<java.lang.Double>(_list23.size);
                double _elem24;
                for (int _i25 = 0; _i25 < _list23.size; ++_i25)
                {
                  _elem24 = iprot.readDouble();
                  _elem21.add(_elem24);
                }
              }
              struct.m1.add(_elem21);
            }
          }
          struct.setM1IsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list26 = iprot.readListBegin(org.apache.thrift.protocol.TType.LIST);
            struct.m2 = new java.util.ArrayList<java.util.List<java.lang.Double>>(_list26.size);
            @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _elem27;
            for (int _i28 = 0; _i28 < _list26.size; ++_i28)
            {
              {
                org.apache.thrift.protocol.TList _list29 = iprot.readListBegin(org.apache.thrift.protocol.TType.DOUBLE);
                _elem27 = new java.util.ArrayList<java.lang.Double>(_list29.size);
                double _elem30;
                for (int _i31 = 0; _i31 < _list29.size; ++_i31)
                {
                  _elem30 = iprot.readDouble();
                  _elem27.add(_elem30);
                }
              }
              struct.m2.add(_elem27);
            }
          }
          struct.setM2IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class sumaM_result implements org.apache.thrift.TBase<sumaM_result, sumaM_result._Fields>, java.io.Serializable, Cloneable, Comparable<sumaM_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sumaM_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sumaM_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sumaM_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Double>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sumaM_result.class, metaDataMap);
    }

    public sumaM_result() {
    }

    public sumaM_result(
      java.util.List<java.util.List<java.lang.Double>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sumaM_result(sumaM_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.util.List<java.lang.Double>> __this__success = new java.util.ArrayList<java.util.List<java.lang.Double>>(other.success.size());
        for (java.util.List<java.lang.Double> other_element : other.success) {
          java.util.List<java.lang.Double> __this__success_copy = new java.util.ArrayList<java.lang.Double>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
    }

    @Override
    public sumaM_result deepCopy() {
      return new sumaM_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.util.List<java.lang.Double>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(java.util.List<java.lang.Double> elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.util.List<java.lang.Double>>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.util.List<java.lang.Double>> getSuccess() {
      return this.success;
    }

    public sumaM_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Double>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.util.List<java.lang.Double>>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof sumaM_result)
        return this.equals((sumaM_result)that);
      return false;
    }

    public boolean equals(sumaM_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sumaM_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sumaM_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sumaM_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public sumaM_resultStandardScheme getScheme() {
        return new sumaM_resultStandardScheme();
      }
    }

    private static class sumaM_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<sumaM_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, sumaM_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.util.List<java.lang.Double>>(_list32.size);
                  @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    {
                      org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                      _elem33 = new java.util.ArrayList<java.lang.Double>(_list35.size);
                      double _elem36;
                      for (int _i37 = 0; _i37 < _list35.size; ++_i37)
                      {
                        _elem36 = iprot.readDouble();
                        _elem33.add(_elem36);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, sumaM_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (java.util.List<java.lang.Double> _iter38 : struct.success)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter38.size()));
                for (double _iter39 : _iter38)
                {
                  oprot.writeDouble(_iter39);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sumaM_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public sumaM_resultTupleScheme getScheme() {
        return new sumaM_resultTupleScheme();
      }
    }

    private static class sumaM_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<sumaM_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sumaM_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.List<java.lang.Double> _iter40 : struct.success)
            {
              {
                oprot.writeI32(_iter40.size());
                for (double _iter41 : _iter40)
                {
                  oprot.writeDouble(_iter41);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sumaM_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list42 = iprot.readListBegin(org.apache.thrift.protocol.TType.LIST);
            struct.success = new java.util.ArrayList<java.util.List<java.lang.Double>>(_list42.size);
            @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _elem43;
            for (int _i44 = 0; _i44 < _list42.size; ++_i44)
            {
              {
                org.apache.thrift.protocol.TList _list45 = iprot.readListBegin(org.apache.thrift.protocol.TType.DOUBLE);
                _elem43 = new java.util.ArrayList<java.lang.Double>(_list45.size);
                double _elem46;
                for (int _i47 = 0; _i47 < _list45.size; ++_i47)
                {
                  _elem46 = iprot.readDouble();
                  _elem43.add(_elem46);
                }
              }
              struct.success.add(_elem43);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class restaM_args implements org.apache.thrift.TBase<restaM_args, restaM_args._Fields>, java.io.Serializable, Cloneable, Comparable<restaM_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("restaM_args");

    private static final org.apache.thrift.protocol.TField M1_FIELD_DESC = new org.apache.thrift.protocol.TField("m1", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField M2_FIELD_DESC = new org.apache.thrift.protocol.TField("m2", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new restaM_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new restaM_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Double>> m1; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Double>> m2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      M1((short)1, "m1"),
      M2((short)2, "m2");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // M1
            return M1;
          case 2: // M2
            return M2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.M1, new org.apache.thrift.meta_data.FieldMetaData("m1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
      tmpMap.put(_Fields.M2, new org.apache.thrift.meta_data.FieldMetaData("m2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(restaM_args.class, metaDataMap);
    }

    public restaM_args() {
    }

    public restaM_args(
      java.util.List<java.util.List<java.lang.Double>> m1,
      java.util.List<java.util.List<java.lang.Double>> m2)
    {
      this();
      this.m1 = m1;
      this.m2 = m2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public restaM_args(restaM_args other) {
      if (other.isSetM1()) {
        java.util.List<java.util.List<java.lang.Double>> __this__m1 = new java.util.ArrayList<java.util.List<java.lang.Double>>(other.m1.size());
        for (java.util.List<java.lang.Double> other_element : other.m1) {
          java.util.List<java.lang.Double> __this__m1_copy = new java.util.ArrayList<java.lang.Double>(other_element);
          __this__m1.add(__this__m1_copy);
        }
        this.m1 = __this__m1;
      }
      if (other.isSetM2()) {
        java.util.List<java.util.List<java.lang.Double>> __this__m2 = new java.util.ArrayList<java.util.List<java.lang.Double>>(other.m2.size());
        for (java.util.List<java.lang.Double> other_element : other.m2) {
          java.util.List<java.lang.Double> __this__m2_copy = new java.util.ArrayList<java.lang.Double>(other_element);
          __this__m2.add(__this__m2_copy);
        }
        this.m2 = __this__m2;
      }
    }

    @Override
    public restaM_args deepCopy() {
      return new restaM_args(this);
    }

    @Override
    public void clear() {
      this.m1 = null;
      this.m2 = null;
    }

    public int getM1Size() {
      return (this.m1 == null) ? 0 : this.m1.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.util.List<java.lang.Double>> getM1Iterator() {
      return (this.m1 == null) ? null : this.m1.iterator();
    }

    public void addToM1(java.util.List<java.lang.Double> elem) {
      if (this.m1 == null) {
        this.m1 = new java.util.ArrayList<java.util.List<java.lang.Double>>();
      }
      this.m1.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.util.List<java.lang.Double>> getM1() {
      return this.m1;
    }

    public restaM_args setM1(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Double>> m1) {
      this.m1 = m1;
      return this;
    }

    public void unsetM1() {
      this.m1 = null;
    }

    /** Returns true if field m1 is set (has been assigned a value) and false otherwise */
    public boolean isSetM1() {
      return this.m1 != null;
    }

    public void setM1IsSet(boolean value) {
      if (!value) {
        this.m1 = null;
      }
    }

    public int getM2Size() {
      return (this.m2 == null) ? 0 : this.m2.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.util.List<java.lang.Double>> getM2Iterator() {
      return (this.m2 == null) ? null : this.m2.iterator();
    }

    public void addToM2(java.util.List<java.lang.Double> elem) {
      if (this.m2 == null) {
        this.m2 = new java.util.ArrayList<java.util.List<java.lang.Double>>();
      }
      this.m2.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.util.List<java.lang.Double>> getM2() {
      return this.m2;
    }

    public restaM_args setM2(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Double>> m2) {
      this.m2 = m2;
      return this;
    }

    public void unsetM2() {
      this.m2 = null;
    }

    /** Returns true if field m2 is set (has been assigned a value) and false otherwise */
    public boolean isSetM2() {
      return this.m2 != null;
    }

    public void setM2IsSet(boolean value) {
      if (!value) {
        this.m2 = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case M1:
        if (value == null) {
          unsetM1();
        } else {
          setM1((java.util.List<java.util.List<java.lang.Double>>)value);
        }
        break;

      case M2:
        if (value == null) {
          unsetM2();
        } else {
          setM2((java.util.List<java.util.List<java.lang.Double>>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case M1:
        return getM1();

      case M2:
        return getM2();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case M1:
        return isSetM1();
      case M2:
        return isSetM2();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof restaM_args)
        return this.equals((restaM_args)that);
      return false;
    }

    public boolean equals(restaM_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_m1 = true && this.isSetM1();
      boolean that_present_m1 = true && that.isSetM1();
      if (this_present_m1 || that_present_m1) {
        if (!(this_present_m1 && that_present_m1))
          return false;
        if (!this.m1.equals(that.m1))
          return false;
      }

      boolean this_present_m2 = true && this.isSetM2();
      boolean that_present_m2 = true && that.isSetM2();
      if (this_present_m2 || that_present_m2) {
        if (!(this_present_m2 && that_present_m2))
          return false;
        if (!this.m2.equals(that.m2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetM1()) ? 131071 : 524287);
      if (isSetM1())
        hashCode = hashCode * 8191 + m1.hashCode();

      hashCode = hashCode * 8191 + ((isSetM2()) ? 131071 : 524287);
      if (isSetM2())
        hashCode = hashCode * 8191 + m2.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(restaM_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetM1(), other.isSetM1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetM1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.m1, other.m1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetM2(), other.isSetM2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetM2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.m2, other.m2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("restaM_args(");
      boolean first = true;

      sb.append("m1:");
      if (this.m1 == null) {
        sb.append("null");
      } else {
        sb.append(this.m1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("m2:");
      if (this.m2 == null) {
        sb.append("null");
      } else {
        sb.append(this.m2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class restaM_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public restaM_argsStandardScheme getScheme() {
        return new restaM_argsStandardScheme();
      }
    }

    private static class restaM_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<restaM_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, restaM_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // M1
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.m1 = new java.util.ArrayList<java.util.List<java.lang.Double>>(_list48.size);
                  @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    {
                      org.apache.thrift.protocol.TList _list51 = iprot.readListBegin();
                      _elem49 = new java.util.ArrayList<java.lang.Double>(_list51.size);
                      double _elem52;
                      for (int _i53 = 0; _i53 < _list51.size; ++_i53)
                      {
                        _elem52 = iprot.readDouble();
                        _elem49.add(_elem52);
                      }
                      iprot.readListEnd();
                    }
                    struct.m1.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setM1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // M2
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list54 = iprot.readListBegin();
                  struct.m2 = new java.util.ArrayList<java.util.List<java.lang.Double>>(_list54.size);
                  @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _elem55;
                  for (int _i56 = 0; _i56 < _list54.size; ++_i56)
                  {
                    {
                      org.apache.thrift.protocol.TList _list57 = iprot.readListBegin();
                      _elem55 = new java.util.ArrayList<java.lang.Double>(_list57.size);
                      double _elem58;
                      for (int _i59 = 0; _i59 < _list57.size; ++_i59)
                      {
                        _elem58 = iprot.readDouble();
                        _elem55.add(_elem58);
                      }
                      iprot.readListEnd();
                    }
                    struct.m2.add(_elem55);
                  }
                  iprot.readListEnd();
                }
                struct.setM2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, restaM_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.m1 != null) {
          oprot.writeFieldBegin(M1_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.m1.size()));
            for (java.util.List<java.lang.Double> _iter60 : struct.m1)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter60.size()));
                for (double _iter61 : _iter60)
                {
                  oprot.writeDouble(_iter61);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.m2 != null) {
          oprot.writeFieldBegin(M2_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.m2.size()));
            for (java.util.List<java.lang.Double> _iter62 : struct.m2)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter62.size()));
                for (double _iter63 : _iter62)
                {
                  oprot.writeDouble(_iter63);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class restaM_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public restaM_argsTupleScheme getScheme() {
        return new restaM_argsTupleScheme();
      }
    }

    private static class restaM_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<restaM_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, restaM_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetM1()) {
          optionals.set(0);
        }
        if (struct.isSetM2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetM1()) {
          {
            oprot.writeI32(struct.m1.size());
            for (java.util.List<java.lang.Double> _iter64 : struct.m1)
            {
              {
                oprot.writeI32(_iter64.size());
                for (double _iter65 : _iter64)
                {
                  oprot.writeDouble(_iter65);
                }
              }
            }
          }
        }
        if (struct.isSetM2()) {
          {
            oprot.writeI32(struct.m2.size());
            for (java.util.List<java.lang.Double> _iter66 : struct.m2)
            {
              {
                oprot.writeI32(_iter66.size());
                for (double _iter67 : _iter66)
                {
                  oprot.writeDouble(_iter67);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, restaM_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list68 = iprot.readListBegin(org.apache.thrift.protocol.TType.LIST);
            struct.m1 = new java.util.ArrayList<java.util.List<java.lang.Double>>(_list68.size);
            @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _elem69;
            for (int _i70 = 0; _i70 < _list68.size; ++_i70)
            {
              {
                org.apache.thrift.protocol.TList _list71 = iprot.readListBegin(org.apache.thrift.protocol.TType.DOUBLE);
                _elem69 = new java.util.ArrayList<java.lang.Double>(_list71.size);
                double _elem72;
                for (int _i73 = 0; _i73 < _list71.size; ++_i73)
                {
                  _elem72 = iprot.readDouble();
                  _elem69.add(_elem72);
                }
              }
              struct.m1.add(_elem69);
            }
          }
          struct.setM1IsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list74 = iprot.readListBegin(org.apache.thrift.protocol.TType.LIST);
            struct.m2 = new java.util.ArrayList<java.util.List<java.lang.Double>>(_list74.size);
            @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _elem75;
            for (int _i76 = 0; _i76 < _list74.size; ++_i76)
            {
              {
                org.apache.thrift.protocol.TList _list77 = iprot.readListBegin(org.apache.thrift.protocol.TType.DOUBLE);
                _elem75 = new java.util.ArrayList<java.lang.Double>(_list77.size);
                double _elem78;
                for (int _i79 = 0; _i79 < _list77.size; ++_i79)
                {
                  _elem78 = iprot.readDouble();
                  _elem75.add(_elem78);
                }
              }
              struct.m2.add(_elem75);
            }
          }
          struct.setM2IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class restaM_result implements org.apache.thrift.TBase<restaM_result, restaM_result._Fields>, java.io.Serializable, Cloneable, Comparable<restaM_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("restaM_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new restaM_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new restaM_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Double>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(restaM_result.class, metaDataMap);
    }

    public restaM_result() {
    }

    public restaM_result(
      java.util.List<java.util.List<java.lang.Double>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public restaM_result(restaM_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.util.List<java.lang.Double>> __this__success = new java.util.ArrayList<java.util.List<java.lang.Double>>(other.success.size());
        for (java.util.List<java.lang.Double> other_element : other.success) {
          java.util.List<java.lang.Double> __this__success_copy = new java.util.ArrayList<java.lang.Double>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
    }

    @Override
    public restaM_result deepCopy() {
      return new restaM_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.util.List<java.lang.Double>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(java.util.List<java.lang.Double> elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.util.List<java.lang.Double>>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.util.List<java.lang.Double>> getSuccess() {
      return this.success;
    }

    public restaM_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Double>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.util.List<java.lang.Double>>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof restaM_result)
        return this.equals((restaM_result)that);
      return false;
    }

    public boolean equals(restaM_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(restaM_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("restaM_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class restaM_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public restaM_resultStandardScheme getScheme() {
        return new restaM_resultStandardScheme();
      }
    }

    private static class restaM_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<restaM_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, restaM_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.util.List<java.lang.Double>>(_list80.size);
                  @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _elem81;
                  for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                  {
                    {
                      org.apache.thrift.protocol.TList _list83 = iprot.readListBegin();
                      _elem81 = new java.util.ArrayList<java.lang.Double>(_list83.size);
                      double _elem84;
                      for (int _i85 = 0; _i85 < _list83.size; ++_i85)
                      {
                        _elem84 = iprot.readDouble();
                        _elem81.add(_elem84);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.add(_elem81);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, restaM_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (java.util.List<java.lang.Double> _iter86 : struct.success)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter86.size()));
                for (double _iter87 : _iter86)
                {
                  oprot.writeDouble(_iter87);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class restaM_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public restaM_resultTupleScheme getScheme() {
        return new restaM_resultTupleScheme();
      }
    }

    private static class restaM_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<restaM_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, restaM_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.List<java.lang.Double> _iter88 : struct.success)
            {
              {
                oprot.writeI32(_iter88.size());
                for (double _iter89 : _iter88)
                {
                  oprot.writeDouble(_iter89);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, restaM_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list90 = iprot.readListBegin(org.apache.thrift.protocol.TType.LIST);
            struct.success = new java.util.ArrayList<java.util.List<java.lang.Double>>(_list90.size);
            @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _elem91;
            for (int _i92 = 0; _i92 < _list90.size; ++_i92)
            {
              {
                org.apache.thrift.protocol.TList _list93 = iprot.readListBegin(org.apache.thrift.protocol.TType.DOUBLE);
                _elem91 = new java.util.ArrayList<java.lang.Double>(_list93.size);
                double _elem94;
                for (int _i95 = 0; _i95 < _list93.size; ++_i95)
                {
                  _elem94 = iprot.readDouble();
                  _elem91.add(_elem94);
                }
              }
              struct.success.add(_elem91);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class productoM_args implements org.apache.thrift.TBase<productoM_args, productoM_args._Fields>, java.io.Serializable, Cloneable, Comparable<productoM_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("productoM_args");

    private static final org.apache.thrift.protocol.TField M1_FIELD_DESC = new org.apache.thrift.protocol.TField("m1", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField M2_FIELD_DESC = new org.apache.thrift.protocol.TField("m2", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new productoM_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new productoM_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Double>> m1; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Double>> m2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      M1((short)1, "m1"),
      M2((short)2, "m2");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // M1
            return M1;
          case 2: // M2
            return M2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.M1, new org.apache.thrift.meta_data.FieldMetaData("m1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
      tmpMap.put(_Fields.M2, new org.apache.thrift.meta_data.FieldMetaData("m2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(productoM_args.class, metaDataMap);
    }

    public productoM_args() {
    }

    public productoM_args(
      java.util.List<java.util.List<java.lang.Double>> m1,
      java.util.List<java.util.List<java.lang.Double>> m2)
    {
      this();
      this.m1 = m1;
      this.m2 = m2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public productoM_args(productoM_args other) {
      if (other.isSetM1()) {
        java.util.List<java.util.List<java.lang.Double>> __this__m1 = new java.util.ArrayList<java.util.List<java.lang.Double>>(other.m1.size());
        for (java.util.List<java.lang.Double> other_element : other.m1) {
          java.util.List<java.lang.Double> __this__m1_copy = new java.util.ArrayList<java.lang.Double>(other_element);
          __this__m1.add(__this__m1_copy);
        }
        this.m1 = __this__m1;
      }
      if (other.isSetM2()) {
        java.util.List<java.util.List<java.lang.Double>> __this__m2 = new java.util.ArrayList<java.util.List<java.lang.Double>>(other.m2.size());
        for (java.util.List<java.lang.Double> other_element : other.m2) {
          java.util.List<java.lang.Double> __this__m2_copy = new java.util.ArrayList<java.lang.Double>(other_element);
          __this__m2.add(__this__m2_copy);
        }
        this.m2 = __this__m2;
      }
    }

    @Override
    public productoM_args deepCopy() {
      return new productoM_args(this);
    }

    @Override
    public void clear() {
      this.m1 = null;
      this.m2 = null;
    }

    public int getM1Size() {
      return (this.m1 == null) ? 0 : this.m1.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.util.List<java.lang.Double>> getM1Iterator() {
      return (this.m1 == null) ? null : this.m1.iterator();
    }

    public void addToM1(java.util.List<java.lang.Double> elem) {
      if (this.m1 == null) {
        this.m1 = new java.util.ArrayList<java.util.List<java.lang.Double>>();
      }
      this.m1.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.util.List<java.lang.Double>> getM1() {
      return this.m1;
    }

    public productoM_args setM1(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Double>> m1) {
      this.m1 = m1;
      return this;
    }

    public void unsetM1() {
      this.m1 = null;
    }

    /** Returns true if field m1 is set (has been assigned a value) and false otherwise */
    public boolean isSetM1() {
      return this.m1 != null;
    }

    public void setM1IsSet(boolean value) {
      if (!value) {
        this.m1 = null;
      }
    }

    public int getM2Size() {
      return (this.m2 == null) ? 0 : this.m2.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.util.List<java.lang.Double>> getM2Iterator() {
      return (this.m2 == null) ? null : this.m2.iterator();
    }

    public void addToM2(java.util.List<java.lang.Double> elem) {
      if (this.m2 == null) {
        this.m2 = new java.util.ArrayList<java.util.List<java.lang.Double>>();
      }
      this.m2.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.util.List<java.lang.Double>> getM2() {
      return this.m2;
    }

    public productoM_args setM2(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Double>> m2) {
      this.m2 = m2;
      return this;
    }

    public void unsetM2() {
      this.m2 = null;
    }

    /** Returns true if field m2 is set (has been assigned a value) and false otherwise */
    public boolean isSetM2() {
      return this.m2 != null;
    }

    public void setM2IsSet(boolean value) {
      if (!value) {
        this.m2 = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case M1:
        if (value == null) {
          unsetM1();
        } else {
          setM1((java.util.List<java.util.List<java.lang.Double>>)value);
        }
        break;

      case M2:
        if (value == null) {
          unsetM2();
        } else {
          setM2((java.util.List<java.util.List<java.lang.Double>>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case M1:
        return getM1();

      case M2:
        return getM2();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case M1:
        return isSetM1();
      case M2:
        return isSetM2();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof productoM_args)
        return this.equals((productoM_args)that);
      return false;
    }

    public boolean equals(productoM_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_m1 = true && this.isSetM1();
      boolean that_present_m1 = true && that.isSetM1();
      if (this_present_m1 || that_present_m1) {
        if (!(this_present_m1 && that_present_m1))
          return false;
        if (!this.m1.equals(that.m1))
          return false;
      }

      boolean this_present_m2 = true && this.isSetM2();
      boolean that_present_m2 = true && that.isSetM2();
      if (this_present_m2 || that_present_m2) {
        if (!(this_present_m2 && that_present_m2))
          return false;
        if (!this.m2.equals(that.m2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetM1()) ? 131071 : 524287);
      if (isSetM1())
        hashCode = hashCode * 8191 + m1.hashCode();

      hashCode = hashCode * 8191 + ((isSetM2()) ? 131071 : 524287);
      if (isSetM2())
        hashCode = hashCode * 8191 + m2.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(productoM_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetM1(), other.isSetM1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetM1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.m1, other.m1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetM2(), other.isSetM2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetM2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.m2, other.m2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("productoM_args(");
      boolean first = true;

      sb.append("m1:");
      if (this.m1 == null) {
        sb.append("null");
      } else {
        sb.append(this.m1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("m2:");
      if (this.m2 == null) {
        sb.append("null");
      } else {
        sb.append(this.m2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class productoM_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public productoM_argsStandardScheme getScheme() {
        return new productoM_argsStandardScheme();
      }
    }

    private static class productoM_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<productoM_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, productoM_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // M1
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                  struct.m1 = new java.util.ArrayList<java.util.List<java.lang.Double>>(_list96.size);
                  @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _elem97;
                  for (int _i98 = 0; _i98 < _list96.size; ++_i98)
                  {
                    {
                      org.apache.thrift.protocol.TList _list99 = iprot.readListBegin();
                      _elem97 = new java.util.ArrayList<java.lang.Double>(_list99.size);
                      double _elem100;
                      for (int _i101 = 0; _i101 < _list99.size; ++_i101)
                      {
                        _elem100 = iprot.readDouble();
                        _elem97.add(_elem100);
                      }
                      iprot.readListEnd();
                    }
                    struct.m1.add(_elem97);
                  }
                  iprot.readListEnd();
                }
                struct.setM1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // M2
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list102 = iprot.readListBegin();
                  struct.m2 = new java.util.ArrayList<java.util.List<java.lang.Double>>(_list102.size);
                  @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _elem103;
                  for (int _i104 = 0; _i104 < _list102.size; ++_i104)
                  {
                    {
                      org.apache.thrift.protocol.TList _list105 = iprot.readListBegin();
                      _elem103 = new java.util.ArrayList<java.lang.Double>(_list105.size);
                      double _elem106;
                      for (int _i107 = 0; _i107 < _list105.size; ++_i107)
                      {
                        _elem106 = iprot.readDouble();
                        _elem103.add(_elem106);
                      }
                      iprot.readListEnd();
                    }
                    struct.m2.add(_elem103);
                  }
                  iprot.readListEnd();
                }
                struct.setM2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, productoM_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.m1 != null) {
          oprot.writeFieldBegin(M1_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.m1.size()));
            for (java.util.List<java.lang.Double> _iter108 : struct.m1)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter108.size()));
                for (double _iter109 : _iter108)
                {
                  oprot.writeDouble(_iter109);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.m2 != null) {
          oprot.writeFieldBegin(M2_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.m2.size()));
            for (java.util.List<java.lang.Double> _iter110 : struct.m2)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter110.size()));
                for (double _iter111 : _iter110)
                {
                  oprot.writeDouble(_iter111);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class productoM_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public productoM_argsTupleScheme getScheme() {
        return new productoM_argsTupleScheme();
      }
    }

    private static class productoM_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<productoM_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, productoM_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetM1()) {
          optionals.set(0);
        }
        if (struct.isSetM2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetM1()) {
          {
            oprot.writeI32(struct.m1.size());
            for (java.util.List<java.lang.Double> _iter112 : struct.m1)
            {
              {
                oprot.writeI32(_iter112.size());
                for (double _iter113 : _iter112)
                {
                  oprot.writeDouble(_iter113);
                }
              }
            }
          }
        }
        if (struct.isSetM2()) {
          {
            oprot.writeI32(struct.m2.size());
            for (java.util.List<java.lang.Double> _iter114 : struct.m2)
            {
              {
                oprot.writeI32(_iter114.size());
                for (double _iter115 : _iter114)
                {
                  oprot.writeDouble(_iter115);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, productoM_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list116 = iprot.readListBegin(org.apache.thrift.protocol.TType.LIST);
            struct.m1 = new java.util.ArrayList<java.util.List<java.lang.Double>>(_list116.size);
            @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _elem117;
            for (int _i118 = 0; _i118 < _list116.size; ++_i118)
            {
              {
                org.apache.thrift.protocol.TList _list119 = iprot.readListBegin(org.apache.thrift.protocol.TType.DOUBLE);
                _elem117 = new java.util.ArrayList<java.lang.Double>(_list119.size);
                double _elem120;
                for (int _i121 = 0; _i121 < _list119.size; ++_i121)
                {
                  _elem120 = iprot.readDouble();
                  _elem117.add(_elem120);
                }
              }
              struct.m1.add(_elem117);
            }
          }
          struct.setM1IsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list122 = iprot.readListBegin(org.apache.thrift.protocol.TType.LIST);
            struct.m2 = new java.util.ArrayList<java.util.List<java.lang.Double>>(_list122.size);
            @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _elem123;
            for (int _i124 = 0; _i124 < _list122.size; ++_i124)
            {
              {
                org.apache.thrift.protocol.TList _list125 = iprot.readListBegin(org.apache.thrift.protocol.TType.DOUBLE);
                _elem123 = new java.util.ArrayList<java.lang.Double>(_list125.size);
                double _elem126;
                for (int _i127 = 0; _i127 < _list125.size; ++_i127)
                {
                  _elem126 = iprot.readDouble();
                  _elem123.add(_elem126);
                }
              }
              struct.m2.add(_elem123);
            }
          }
          struct.setM2IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class productoM_result implements org.apache.thrift.TBase<productoM_result, productoM_result._Fields>, java.io.Serializable, Cloneable, Comparable<productoM_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("productoM_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new productoM_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new productoM_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Double>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(productoM_result.class, metaDataMap);
    }

    public productoM_result() {
    }

    public productoM_result(
      java.util.List<java.util.List<java.lang.Double>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public productoM_result(productoM_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.util.List<java.lang.Double>> __this__success = new java.util.ArrayList<java.util.List<java.lang.Double>>(other.success.size());
        for (java.util.List<java.lang.Double> other_element : other.success) {
          java.util.List<java.lang.Double> __this__success_copy = new java.util.ArrayList<java.lang.Double>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
    }

    @Override
    public productoM_result deepCopy() {
      return new productoM_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.util.List<java.lang.Double>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(java.util.List<java.lang.Double> elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.util.List<java.lang.Double>>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.util.List<java.lang.Double>> getSuccess() {
      return this.success;
    }

    public productoM_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Double>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.util.List<java.lang.Double>>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof productoM_result)
        return this.equals((productoM_result)that);
      return false;
    }

    public boolean equals(productoM_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(productoM_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("productoM_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class productoM_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public productoM_resultStandardScheme getScheme() {
        return new productoM_resultStandardScheme();
      }
    }

    private static class productoM_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<productoM_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, productoM_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list128 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.util.List<java.lang.Double>>(_list128.size);
                  @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _elem129;
                  for (int _i130 = 0; _i130 < _list128.size; ++_i130)
                  {
                    {
                      org.apache.thrift.protocol.TList _list131 = iprot.readListBegin();
                      _elem129 = new java.util.ArrayList<java.lang.Double>(_list131.size);
                      double _elem132;
                      for (int _i133 = 0; _i133 < _list131.size; ++_i133)
                      {
                        _elem132 = iprot.readDouble();
                        _elem129.add(_elem132);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.add(_elem129);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, productoM_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (java.util.List<java.lang.Double> _iter134 : struct.success)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter134.size()));
                for (double _iter135 : _iter134)
                {
                  oprot.writeDouble(_iter135);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class productoM_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public productoM_resultTupleScheme getScheme() {
        return new productoM_resultTupleScheme();
      }
    }

    private static class productoM_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<productoM_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, productoM_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.List<java.lang.Double> _iter136 : struct.success)
            {
              {
                oprot.writeI32(_iter136.size());
                for (double _iter137 : _iter136)
                {
                  oprot.writeDouble(_iter137);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, productoM_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list138 = iprot.readListBegin(org.apache.thrift.protocol.TType.LIST);
            struct.success = new java.util.ArrayList<java.util.List<java.lang.Double>>(_list138.size);
            @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _elem139;
            for (int _i140 = 0; _i140 < _list138.size; ++_i140)
            {
              {
                org.apache.thrift.protocol.TList _list141 = iprot.readListBegin(org.apache.thrift.protocol.TType.DOUBLE);
                _elem139 = new java.util.ArrayList<java.lang.Double>(_list141.size);
                double _elem142;
                for (int _i143 = 0; _i143 < _list141.size; ++_i143)
                {
                  _elem142 = iprot.readDouble();
                  _elem139.add(_elem142);
                }
              }
              struct.success.add(_elem139);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}


